#include <cmath>
#include <iomanip>
#include <iostream>
#include <Windows.h>

namespace sphere
{
	float volume;
}

int main(int _arguments_counter, char* _arguments_value)
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	/*
	Задание 1. Пользователь вводит год. Необходимо напи-
	сать программу, которая выведет количество дней в этом
	году. При написании программы использовать линейный
	алгоритм (конструкции условного выбора не использо-
	вать). Например, пользователь ввел год 2004, программа
	сообщает, что в этом году 366 дней в следующей форме:
				In 2004 year = 366 days
	*/
	int year = 0;
	bool check = 0;


	TryAgain:
		std::cout << "введите год: ";
		std::cin >> year;

		if (year < 0)
		{
			std::cout << "введенное число должно быть положительным." << std::endl;
			goto TryAgain;
		}

	check = year % 4;

	std::cout << "В " << year << " году: " << 366 - check << " дней." << std::endl;

	/*
	Задание 2. Пользователь вводит с клавиатуры денежную
	сумму в гривнах и копейках (гривны и копейки вводятся
	в разные переменные). Сумма может быть введена как
	правильно (например 19 грн. 90 коп), так и неправильно
	(например 22 грн. 978 коп). Написать программу, которая,
	используя только линейный алгоритм, осуществит коррек-
	тировку введенной денежной суммы в правильную форму.
	Например, если пользователь ввел 11 грн. 150 коп,
	программа должна вывести на экран сумму 12 грн. 50 коп.
	*/
	int money = 0;
	int coins = 0;

	TryAgainMoney:
		std::cout << "введите сумму в гривнах: ";
		std::cin >> money;
	
	if (money < 0)
	{
		std::cout << "введенное сумма должна быть положительной." << std::endl;
		goto TryAgainMoney;
	}

	TryAgainCoins:
		std::cout << "введите сумму в копейках: ";
		std::cin >> coins;

	if(coins < 0)
	{
		std::cout << "введенное сумма должна быть положительной." << std::endl;
		goto TryAgainCoins;
	}

	std::cout << "введенная сумма: " << money + coins / 100 << " грн. " << coins % 100 << " копеек." << std::endl;

	/*
	Задание 3. Написать программу вычисления объема па-
	раллелепипеда. Ниже приведен рекомендуемый вид экрана
	во время выполнения программы.
	Вычисление объема параллелепипеда.
	Введите исходные данные:		
		Длина (см) -> 9;
		Ширина (см) -> 7.5;
		Высота (см) -> 5;
		Объем: 337.50 куб. см.
	*/
	float length = 0.0;
	float width = 0.0;
	float high = 0.0;
	float volume = 0.0;

	std::cout << "Вычисление объема параллепипеда.\nВведите исходные данные:" << std::endl;
	std::cout << "Длина (см.) -> ";
	std::cin >> length;
	std::cout << "Ширина (см.) -> ";
	std::cin >> width;
	std::cout << "Высота (см.) -> ";
	std::cin >> high;
	std::cout << "Объем: " << std::fixed << std::setprecision(2) << length * width * high << " куб. см." << std::endl;

	/*
	Задание 4. Написать программу вычисления расстояния
	между населенными пунктами, изображенными на кар-
	те. Ниже приведен рекомендуемый вид экрана во время
	выполнения программы.
	Вычисление расстояния между населенными пунктами
	Введите исходные данные:
		Масштаб карты (количество километров в одномсантиметре) -> 120.
		Расстояние между точками, изображающиминаселенные пункты (см) -> 3.5.
		Расстояние между населенными пунктами 420 км.
	*/
	float _map_scale = 0.0;
	float _distance_between_points = 0.0;

	std::cout << "Вычисление расстояния между населенными пунктами.\nВведите исходные данные:" << std::endl;
	std::cout << "Масштаб карты (количество километров в одном сантиметре) -> ";
	std::cin >> _map_scale;
	std::cout << "Расстояние между точками, изображающими населенные пункты (см.) -> ";
	std::cin >> _distance_between_points;

	std::cout << "Расстояние между населенными пунктами: " << _map_scale * _distance_between_points << " км." << std::endl;

	// Задание 5. Напишите программу, которая вычисляет объём шара.
	const float PI = 3.14;
	float radius = 0.0;
	sphere::volume = 0.0;
	
	std::cout << "введите длину радиуса шара: ";
	std::cin >> radius;

	sphere::volume = 4 * pow(radius, 3) * PI / 3;

	std::cout << "объем шара равен: " << sphere::volume << std::endl;

	return 0;
}